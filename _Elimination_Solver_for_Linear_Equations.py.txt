import numpy as np

def Gauss(a,b):
    
    #The following two if statements prevent the occurance of the errors related to the mathematics of matrices.
    #The first checks if the entered coefficient array is a square array or not by comparing the row length with the column length.
    #The second checks whether the column length of the coefficient array and constant array are equal or not.
    
    if np.size(a, axis=0) != np.size(a, axis=1):
        print('ERROR! The Coefficient Matrix you just entered is not a square matrix.')
        return

    if np.size(a, axis=0) != np.size(b):
        print('ERROR! The constant matrix you just entered can not match with coefficient matrix.')
        return
        
    n = np.size(a, axis=1) #n is the column size of array a.
    #Augumentation:- Combining the a and b arrays. It helps us to work out the iterations all together. 
    a = np.concatenate((a,b), axis=1, dtype=float)
    #print(f'Augumented matrix : \n {a}')
    #The elimination algorithm 
    for c in range(0, n-1): #c is for column index
        for r in range(c+1, n): #r is for raw index
        	if a[r,c] != 0 :
        	    a[r, c:] = a[r, c:] - (a[r, c] / a[c, c]) * a[c, c:]
            
        #print(f'Step {c+1} \n {a}')
    #Separating the Augumented matrix
    b = a[:, n]
    a = a[:n, :n]
    #print(f'The new coefficient matrix: \n {a}')
    #print(f'The new Constant matrix: \n {b}')
    #Back Substitution
    x = np.zeros((n)) #x is the solution array/matrix
    x[n-1] = b[n-1] / a[n-1, n-1]
    for i in range(n-2, -1, -1):
        x[i] = (b[i] - np.dot((a[i, i+1:n]), (x[i+1:]))) / a[i, i]
    return x
v = np.array([[3.5,2.77,-0.76,1.8],[-1.8,2.68,3.44,-0.09],[0.27,5.07,6.90,1.61],[1.71,5.45,2.68,1.71]])
c = np.array([[7.31],[4.23],[13.85],[11.55]])
Gauss(v,c)